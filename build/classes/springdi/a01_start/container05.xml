<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc.xsd     
        http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
         http://www.springframework.org/schema/websocket
      http://www.springframework.org/schema/websocket/spring-websocket.xsd">

<!--
# 여러가지 데이터 구조에 따른 처리.
1. ArrayList형 데이터 처리
	1) 단일 데이터 처리
	ArrayList<String> blist = new ArrayList<String>
	blist.add("사과");
	blist.add("바나나");
	blist.add("딸기");
	blist.add("오렌지");
	2) 위데이터를 처리할 기능메서드
	public void setBlist(ArrayList<String> blist){
		this.list = blist
	}
	3) 컨테이너에서 처리 내용
	list value-type="java.lang.String"
		value 사과
		value 바나나
		value 딸기
		value 오렌지
 -->
	<bean id="fMart" class="springdi.a01_start.z01_vo.Mart">
		<constructor-arg value="과일"/>
		<property name="blist">
			<list value-type="java.lang.String">
				<value>사과</value>
				<value>바나나</value>
				<value>딸기</value>
				<value>오렌지</value>
			</list>
		</property>
	</bean>
<!-- 
ex) @@@의 좋아하는 음악리스트 MyMusic 클래스로 선언하여 출력하여 처리할 수 있도록 하자.
	@@@
	@@@
 -->
	<bean id="myArtist" class="springdi.a01_start.z01_vo.MyMusic">
		<constructor-arg value="아이유" />
		<property name="mlist">
			<list value-type="java.lang.String">
				<value>좋은날</value>
				<value>미야</value>
				<value>마시멜로</value>
			</list>
		</property>
	</bean>
	<bean id="sensor1" class="springdi.a01_start.z01_vo.Sensor">
		<!-- 
		# Properties타입의 데이터할당
		1. 여러개의 key, value형식의 데이터를 할당하여 처리할 수 있다.
			key값은 유일로 처리하기 때문에 중복을 허용하지 않는다.
			다중으로 저장하더라도 마지막에 저장된 value값으로 저장 처리된다.
		2. key:value으로 단위 데이터가 매핑되어 있고,
		3. props로 위 단위데이터를 누적해서 할당하여 처리하고 있다.
		public void setAddInfo(Properties addInfo)
		-->
		<property name="addInfo">
			<props>
				<prop key="himan">7777</prop>
				<prop key="higirl">8888</prop>
				<prop key="goodMan">9999</prop>
			</props>
		</property>
		<!-- 
		# Set타입의 데이터할당
		1. 순서확보가 되지 않지만, 중복허용이 안되게 처리
		
		public void setAgentCodes(Set<String> agentCodes)
		-->
		<property name="agentCodes">
			<set>
				<value>홍길동</value>
				<value>김길동</value>
				<value>이영자</value>
				<value>홍길동</value>
				<value>김길동</value>
			</set>
		</property>
		<!-- 
		# Map타입의 데이터할당
		1. key, value의 모임으로 처리하나
			key의 type과 value의 type을 사용자 지정하여 처리할 수 있다.
			Map<key문자, Object>
				하나의 키에 기본데이터의 객체유형 클래스(Wrapper클래스)로
				하나의 데이터 뿐만아니라, Person등 사용자 정의 객체,
				ArrayList<VO>등 다중의 리스트형 객체까지 할당할 수 있다.
			key는 중복되지않는 특징을 가지고 있다.
				
		public void setConfig(Map<String, Integer> config)
		 -->
		<property name="config">
			<map>
				<entry key="간격" value="1000"/>
				<entry key="시간">
					<value>2000</value>
				</entry>
			</map>
			
		</property>
	</bean>
</beans>