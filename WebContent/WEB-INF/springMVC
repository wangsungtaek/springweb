# 스프링 화면 처리 프로세스
1 http://localhost:7080/springweb/start.do url
2. web.xml
	.do 를 확인해서 front controller인
	DispatcherServlet.java(framwork)
3. dispatcher-servlet.xml을 호출하여,
	해당하는 컨테이너에 등록된 객체를 확인하고,
	메모리에 로딩된 객체를 찾는다.
4. 위에 등록된 객체 안에서 url 패턴이 /start.do
	인 것인 기능메서드를 찾는다.
	@RequestMapping("/start.do")
	해당 controller의 기능메서드를 수행해준다.
	start(@RequestParam("name") String name, Model d)
5. 해당 기능 메서드에서 요청값과 Model값 설정은 매개변수로 받을 수 있다.
	public String start(@RequestParam("name") String name, Model d)
6. 해당 기능 메서드에 문자열로 리턴된 view단으로 화면이 호출된다.
	return "jsp파일 위치";


# 스프링 핵심 구현
1. front controller 선언
	DispatcherServlet
	
2. 사용할 container 선언
	DispatcherServlet의 설정 값 처리 xml
	dispatcher-servlet.xml : 여기에 선언하는 객체 활용 방식을 정확하게 파악하고
	설정할 수 있어야 원활하게 스프링을 코딩하고 설정할 수 있다.
	bean클래스 선언을 통해서 tomcat이 시작되어
	첫번째 호출 될 때, 사용할 객체 메모리로 로딩.
		- Controller를 등록 처리.
	
3. MVC
	- Controller : java 클래스로 선언
	- Model : controller 안에 선언
	- View : jsp 파일 controller에서 호출
		스프링의 view는 외부에서 url로 접근하지 못하고,
		controller를 통해서만 접근이 가능하게 처리한다.
		WebContent\WEB-INF : 아무나 접근 불가
		
# 환경 설정 순서
1. lib 복사
2. http://localhost:7080/springweb/start.do
	- 호출되었을 때, 스프링 프레임웍에 의해서 controller가
	호출 되고, view단이 출력되게 처리한다.
	- 사용하게 될 controller를 컨테이너에 등록 dispatcher-servlet.xml
	- controller에 @Controller를 선언
	
3. 스프링 프레임웍의 첫단추인 front 컨트롤단 호출
	.do를 통해서
	
4. /start.do url을 통해서 mapping되어 있는 controller
	의 기능 메서드 호출..
5. 해당 기능 메서드의 return "view 자원 위치"
	통해서 view호출

# 요청값 처리..
&name=홍길동
1. request.getParameter("name")
	form(@RequestParam("name") String name)
	요청값을 name의 key String name에 할당하여 가져올 수 있다.